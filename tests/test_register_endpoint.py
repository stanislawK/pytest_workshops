from http import HTTPStatus

import pytest

from app.models import UserModel


def test_register_valid_user(_db, client, new_user):
    """Test register user with valid data."""
    # Send test post request with flask test_client
    # Add valid user data in payload as a json
    rv = client.post("/auth/register/", json=new_user)

    response = rv.get_json()
    user_db = _db.session.query(UserModel).first()

    assert rv.status_code == HTTPStatus.CREATED
    # Make shure that email is and password is not in response
    assert response["email"] == new_user["email"]
    assert not response.get("password")

    # Check if user was added to db with valid data
    assert user_db.email == new_user["email"]
    assert user_db.password != new_user


@pytest.mark.parametrize("invalid", ["password", "email"])
def test_register_endpoint_with_invalid_data(_db, client, invalid, new_user):
    """Try to register user with invalid email or password."""
    # Set user data to invalid: too short password, not a valid email adress
    new_user[invalid] = "bad"
    rv = client.post("/auth/register/", json=new_user)

    # Error response should be automatically generated by marshmallow
    response = rv.get_json()

    # Check status code and json response with error
    assert rv.status_code == HTTPStatus.BAD_REQUEST

    # Check if no user was added to db
    assert not _db.session.query(UserModel).all()

    """
    Responses for invalid data payload:
    {
      "email": [
        "Not a valid email address."
      ]
    }
    {
      "password": [
        "Length must be between 5 and 70."
      ]
    }
    """

    # Check if error for invalid field was rised
    assert response[invalid]


def test_register_user_twice(client, new_user):
    """Test register these same user twice."""
    rv = client.post("/auth/register/", json=new_user)
    assert rv.status_code == HTTPStatus.CREATED

    # Make sure that proper status code and error were raised
    rv = client.post("/auth/register/", json=new_user)
    response = rv.get_json()
    assert rv.status_code == HTTPStatus.BAD_REQUEST
    assert response["message"] == "User with that email exists already"


def test_register_user_without_payload(client):
    """Test register user without any data in payload."""
    rv = client.post("/auth/register/")
    response = rv.get_json()

    assert rv.status_code == HTTPStatus.BAD_REQUEST
    assert 'No input data provided' in response['message']


@pytest.mark.parametrize("missing", ["password", "email"])
def test_register_user_with_missing_data(client, missing, new_user):
    """Test register user with one field missing."""
    new_user.pop(missing)
    rv = client.post("/auth/register/", json=new_user)
    response = rv.get_json()

    assert rv.status_code == HTTPStatus.BAD_REQUEST
    assert 'Missing data for required field.' in response[missing]


@pytest.mark.parametrize("method", ["get", "put", "delete"])
def test_register_user_with_not_allowed_methods(client, new_user, method):
    """Test send GET, PUT, DELETE request to register endpoint."""
    rv = getattr(client, method)("/auth/register", json=new_user)

    assert rv.status_code == HTTPStatus.METHOD_NOT_ALLOWED
